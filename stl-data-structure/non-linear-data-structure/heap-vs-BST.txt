          Type      BST (*)   Heap
Insert    average   log(n)    1
Insert    worst     log(n)    log(n) or n (***) [加一个元素在底部；从底到顶heapify，log(n)]
Find any  worst     log(n)    n
Find max  worst     1 (**)    1
Create    worst     n log(n)  n
Delete    worst     log(n)    log(n)		[删除root，从末尾拿一个元素放到顶端，从顶端下沉到底端，一次heapify，log(n)]

All average times on this table are the same as their worst times except for Insert.

*: everywhere in this answer, BST == Balanced BST, since unbalanced sucks asymptotically
**: using a trivial modification explained in this answer
***: log(n) for pointer tree heap, n for dynamic array heap [because copying the backing dynamic array to double its size takes O(n) worst case]

往Heap中插入数据，因为不需要完全排序，所以会耗时少。
但是Heap因为没完全排序，查找元素的操作是不合适的。

